#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

struct Edge {
    int src, dest, weight;
};

struct DisjointSet {
    vector<int> parent;

    DisjointSet(int n) {
        parent.resize(n);
        for (int i = 0; i < n; ++i)
            parent[i] = i;
    }

    int find(int u) {
        if (u != parent[u])
            parent[u] = find(parent[u]);
        return parent[u];
    }

    void unite(int u, int v) {
        parent[find(u)] = find(v);
    }
};

bool compareEdges(const Edge &e1, const Edge &e2) {
    return e1.weight < e2.weight;
}

vector<Edge> kruskal(int V, vector<Edge> &edges) {
    vector<Edge> mst;
    sort(edges.begin(), edges.end(), compareEdges);
    DisjointSet ds(V);

    for (const Edge &edge : edges) {
        if (ds.find(edge.src) != ds.find(edge.dest)) {
            mst.push_back(edge);
            ds.unite(edge.src, edge.dest);
            if (mst.size() == V - 1)
                break;
        }
    }

    return mst;
}

int main() {
    int V, E;
    cin >> V >> E;
    vector<Edge> edges(E);

    for (int i = 0; i < E; ++i)
        cin >> edges[i].src >> edges[i].dest >> edges[i].weight;

    vector<Edge> mst = kruskal(V, edges);

    for (const Edge &edge : mst)
        cout << edge.src << " - " << edge.dest << " : " << edge.weight << "\n";

    return 0;
}
