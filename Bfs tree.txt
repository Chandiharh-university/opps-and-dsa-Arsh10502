#include <iostream>
#include <vector>
#include <queue>

using namespace std;

class Graph {
private:
    vector<vector<int>> adjList;
    int numNodes;

public:
    Graph(int nodes) : numNodes(nodes) {
        adjList.resize(nodes);
    }

    void addEdge(int u, int v) {
        adjList[u].push_back(v);
        adjList[v].push_back(u); 
    }

    void BFS(int startNode) {
        vector<bool> visited(numNodes, false);
        queue<int> q;

        q.push(startNode);
        visited[startNode] = true;

        cout << "BFS Traversal starting from node " << startNode << ": ";

        while (!q.empty()) {
            int current = q.front();
            q.pop();

            cout << current << " ";

            for (auto neighbor : adjList[current]) {
                if (!visited[neighbor]) {
                    q.push(neighbor);
                    visited[neighbor] = true;
                }
            }
        }

        cout << endl;
    }
};

int main() {
    Graph g(6);

    g.addEdge(0, 1);
    g.addEdge(0, 2);
    g.addEdge(1, 3);
    g.addEdge(1, 4);
    g.addEdge(2, 4);
    g.addEdge(3, 5);
    g.addEdge(4, 5);

    g.BFS(0);

    return 0;
}
